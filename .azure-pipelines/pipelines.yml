# azure-pipelines.yml
trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - '**/*.md'

variables:
  - group: common-variables
  - name: containerRegistry
    value: 'assessment.azurecr.io'
  - name: helmChartPath
    value: 'helm/weather-api'
  - name: DEPENDENCY_CHECK_VERSION
    value: '7.4.4'

stages:
  - stage: Build
    displayName: 'Build and Test'
    jobs:
      - job: BuildTest
        displayName: 'Build, Test and Security Scan'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Restore and Build
          - task: DotNetCoreCLI@2
            displayName: 'Restore NuGet packages'
            inputs:
              command: 'restore'
              projects: '**/*.csproj'
              feedsToUse: 'select'

          - task: DotNetCoreCLI@2
            displayName: 'Build solution'
            inputs:
              command: 'build'
              projects: '**/*.csproj'
              arguments: '--configuration Release --no-restore'
          
          # Run Unit Tests with Coverage
          - task: DotNetCoreCLI@2
            displayName: 'Run unit tests'
            inputs:
              command: 'test'
              projects: '**/*Tests/*.csproj'
              arguments: '--configuration Release --no-build --collect:"XPlat Code Coverage" --logger trx'
              publishTestResults: true

          # Security Scan
          - script: |
              mkdir -p $(Agent.TempDirectory)/dependency-check
              wget "https://github.com/jeremylong/DependencyCheck/releases/download/v$(DEPENDENCY_CHECK_VERSION)/dependency-check-$(DEPENDENCY_CHECK_VERSION)-release.zip" -O $(Agent.TempDirectory)/dependency-check.zip
              unzip -q $(Agent.TempDirectory)/dependency-check.zip -d $(Agent.TempDirectory)/dependency-check
              $(Agent.TempDirectory)/dependency-check/dependency-check/bin/dependency-check.sh \
                --project "Weather API" \
                --scan "$(Build.SourcesDirectory)" \
                --format "HTML" \
                --format "JSON" \
                --format "XML" \
                --failOnCVSS 7 \
                --enableExperimental \
                --out "$(Build.ArtifactStagingDirectory)/dependency-check"
            displayName: 'OWASP Dependency Check'
            continueOnError: false

          # Publish Dependency Check Results
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Dependency Check Results'
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)/dependency-check'
              artifactName: 'DependencyCheck'
              publishLocation: 'Container'

          # Parse results and fail if needed
          - task: PowerShell@2
            displayName: 'Analyze Dependency Check Results'
            inputs:
              targetType: 'inline'
              script: |
                $xmlReport = "$(Build.ArtifactStagingDirectory)/dependency-check/dependency-check-report.xml"
                if (Test-Path $xmlReport) {
                  [xml]$report = Get-Content $xmlReport
                  $highVulnerabilities = $report.analysis.dependencies.dependency.vulnerabilities.vulnerability | 
                    Where-Object { [float]$_.cvssScore -ge 7.0 }
                  if ($highVulnerabilities) {
                    Write-Host "##vso[task.LogIssue type=error]Found $($highVulnerabilities.Count) high severity vulnerabilities"
                    Write-Host "##vso[task.complete result=Failed;]"
                  }
                }

          # Trivy Scanner
          - script: |
              sudo apt-get install -y wget apt-transport-https gnupg lsb-release
              wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
              echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
              sudo apt-get update
              sudo apt-get install -y trivy
              trivy fs --security-checks vuln,config,secret .
              trivy config .
            displayName: 'Trivy Security Scan'

          # Create consolidated security report
          - task: PowerShell@2
            displayName: 'Create Security Report'
            inputs:
              targetType: 'inline'
              script: |
                $reportDir = "$(Build.ArtifactStagingDirectory)/security-report"
                New-Item -ItemType Directory -Force -Path $reportDir
                Copy-Item "$(Build.ArtifactStagingDirectory)/dependency-check/*" -Destination $reportDir -Recurse
                Copy-Item "$(Build.SourcesDirectory)/trivy-results.json" -Destination $reportDir -ErrorAction SilentlyContinue
                $summary = @"
                Security Scan Summary
                ---------------------
                Date: $(Get-Date)
                Build: $(Build.BuildNumber)
                
                Included Scans:
                - OWASP Dependency Check
                - Trivy Security Scan
                
                See detailed reports in the artifacts.
                "@
                $summary | Out-File "$reportDir/summary.txt"

          # Publish consolidated security report
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Security Reports'
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)/security-report'
              artifactName: 'SecurityReports'
              publishLocation: 'Container'

          # Build and Push Docker Image
          - task: Docker@2
            displayName: 'Build and push Docker image'
            inputs:
              containerRegistry: 'assessment-acr-connection'
              repository: 'weather-api'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              buildContext: '$(Build.SourcesDirectory)'
              tags: |
                $(Build.BuildId)
                latest

          # Package Helm Chart
          - task: HelmInstaller@0
            inputs:
              helmVersion: '3.12.3'

          - task: HelmDeploy@0
            displayName: 'Package Helm chart'
            inputs:
              command: 'package'
              chartPath: '$(helmChartPath)'
              destination: '$(Build.ArtifactStagingDirectory)'

          # Publish Artifacts
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Helm Charts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'helm-charts'
              publishLocation: 'Container'

  - stage: DeployToDev
    displayName: 'Deploy to Development'
    dependsOn: Build
    condition: succeeded()
    variables:
      - group: development-variables
    jobs:
      - deployment: Deploy
        environment: development
        strategy:
          runOnce:
            deploy:
              steps:
                - template: templates/deploy-to-aks.yml
                  parameters:
                    environment: 'development'
                    imageTag: $(Build.BuildId)

  - stage: DeployToStaging
    displayName: 'Deploy to Staging'
    dependsOn: DeployToDev
    condition: succeeded()
    variables:
      - group: staging-variables
    jobs:
      - deployment: Deploy
        environment: staging
        strategy:
          runOnce:
            deploy:
              steps:
                - template: templates/deploy-to-aks.yml
                  parameters:
                    environment: 'staging'
                    imageTag: $(Build.BuildId)

  - stage: DeployToProd
    displayName: 'Deploy to Production'
    dependsOn: DeployToStaging
    condition: succeeded()
    variables:
      - group: production-variables
    jobs:
      - deployment: Deploy
        environment: production
        strategy:
          runOnce:
            deploy:
              steps:
                - template: templates/deploy-to-aks.yml
                  parameters:
                    environment: 'production'
                    imageTag: $(Build.BuildId)